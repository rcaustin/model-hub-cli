=== MODEL HUB CLI - INSTALL SCRIPT VERIFICATION GUIDE ===

PROJECT: CSCI450_Project - Model Hub CLI
TASK: Install Script Setup and Verification
STATUS: Complete and Working

=== INSTALL SCRIPT VERIFICATION COMMANDS ===

1. CLEAN ENVIRONMENT TEST
   Remove existing virtual environment:
   rmdir /s .venv
   
   Test fresh install:
   py run.py install

2. PYTHON DETECTION TEST
   Test different Python commands:
   py --version
   python3 --version
   python --version
   
   Test install script:
   py run.py install

3. VIRTUAL ENVIRONMENT VERIFICATION
   Check if .venv directory exists:
   dir .venv
   
   Check virtual environment structure:
   dir .venv\Scripts
   dir .venv\Lib
   
   Test virtual environment activation:
   .venv\Scripts\activate.bat
   python --version
   deactivate

4. DEPENDENCIES VERIFICATION
   Activate virtual environment:
   .venv\Scripts\activate.bat
   
   Check all dependencies are installed:
   pip list
   
   Verify specific key packages:
   pip show huggingface-hub
   pip show loguru
   pip show pytest
   pip show openai
   
   Check package versions match requirements.txt:
   pip freeze

5. TEST SUITE VERIFICATION
   Run tests through main script:
   py run.py test
   
   Run tests directly with pytest:
   .venv\Scripts\pytest tests/ -v
   
   Run specific test file:
   .venv\Scripts\pytest tests/test_basic.py -v
   
   Check test coverage:
   .venv\Scripts\pytest tests/ --cov=src

6. CODE QUALITY TOOLS TEST
   Activate virtual environment:
   .venv\Scripts\activate.bat
   
   Install development tools:
   pip install flake8 mypy black isort
   
   Test code quality tools:
   flake8 src/
   mypy src/
   black --check src/
   isort --check-only src/

7. CROSS-PLATFORM TEST
   Test on Windows:
   py run.py install
   
   Test on Unix/Linux (if available):
   python3 run.py install
   bash setup.sh

=== AUTOMATED TEST SCRIPT ===

Create: tests/test_install.py

import pytest
import subprocess
import sys
from pathlib import Path

def test_python_detection():
    """Test that Python is detected correctly."""
    result = subprocess.run([sys.executable, "--version"], capture_output=True, text=True)
    assert result.returncode == 0
    assert "Python" in result.stdout

def test_virtual_environment_created():
    """Test that virtual environment is created."""
    venv_path = Path(".venv")
    assert venv_path.exists()
    assert (venv_path / "Scripts" / "python.exe").exists() or (venv_path / "bin" / "python").exists()

def test_dependencies_installed():
    """Test that key dependencies are installed."""
    venv_python = Path(".venv") / "Scripts" / "python.exe"
    if not venv_python.exists():
        venv_python = Path(".venv") / "bin" / "python"
    
    packages = ["huggingface_hub", "loguru", "pytest", "openai"]
    for package in packages:
        result = subprocess.run([str(venv_python), "-c", f"import {package}"], 
                              capture_output=True, text=True)
        assert result.returncode == 0, f"Package {package} not installed"

def test_install_script_exit_code():
    """Test that install script returns correct exit code."""
    result = subprocess.run([sys.executable, "run.py", "install"], 
                          capture_output=True, text=True)
    assert result.returncode == 0, f"Install script failed: {result.stderr}"

def test_test_command_works():
    """Test that test command works."""
    result = subprocess.run([sys.executable, "run.py", "test"], 
                          capture_output=True, text=True)
    assert result.returncode == 0, f"Test command failed: {result.stderr}"

=== MANUAL VERIFICATION CHECKLIST ===

PRE-INSTALL CHECKS:
□ Python 3.8+ installed
□ 'py' command works
□ No existing '.venv' directory
□ 'requirements.txt' exists and readable

INSTALL PROCESS CHECKS:
□ Install script runs without errors
□ Virtual environment created in '.venv/'
□ All dependencies installed successfully
□ No missing packages
□ Exit code is 0

POST-INSTALL CHECKS:
□ Virtual environment can be activated
□ Python version in venv matches system
□ All packages importable
□ Test suite runs successfully
□ Code quality tools work (if installed)

ERROR HANDLING CHECKS:
□ Handles missing Python gracefully
□ Handles network errors during pip install
□ Handles corrupted virtual environment
□ Provides clear error messages

=== QUICK VERIFICATION COMMANDS ===

One-liner verification:
py run.py install && py run.py test && echo "✅ Install script works!"

Check virtual environment:
.venv\Scripts\activate.bat && python -c "import huggingface_hub, loguru, pytest" && echo "✅ Dependencies OK"

Test all commands:
py run.py install && py run.py test && py run.py help && echo "✅ All commands work"

=== COMPLETE VERIFICATION SEQUENCE ===

@echo off
echo Testing install script...

REM Clean start
rmdir /s .venv 2>nul

REM Test install
py run.py install
if %errorlevel% neq 0 (
    echo ❌ Install failed
    exit 1
)

REM Test virtual environment
.venv\Scripts\activate.bat
python -c "import huggingface_hub, loguru, pytest"
if %errorlevel% neq 0 (
    echo ❌ Dependencies missing
    exit 1
)

REM Test test suite
py run.py test
if %errorlevel% neq 0 (
    echo ❌ Tests failed
    exit 1
)

echo ✅ All tests passed! Install script works correctly.

=== DAILY USAGE COMMANDS ===

Install dependencies:
py run.py install

Run tests:
py run.py test

Run specific test:
.venv\Scripts\pytest tests/ -v

Activate virtual environment:
.venv\Scripts\activate.bat

Deactivate:
deactivate

Install development tools:
.venv\Scripts\activate.bat
pip install flake8 mypy black isort

Code quality checks:
.venv\Scripts\activate.bat
flake8 src/
mypy src/
black src/

=== TROUBLESHOOTING ===

Python not found:
py --version
python3 --version

Reinstall everything:
rmdir /s .venv
py run.py install

Test specific file:
.venv\Scripts\pytest tests/test_basic.py -v

Development tools not found:
.venv\Scripts\activate.bat
pip install flake8 mypy black isort

Virtual environment issues:
.venv\Scripts\activate.bat
python -c "import sys; print(sys.executable)"

=== PROJECT STATUS ===

✅ Install Script Task Complete
✅ Python Detection Working (py command)
✅ Virtual Environment Created (.venv/)
✅ All Dependencies Installed
✅ Test Suite Working (3 tests passing)
✅ TOML Configuration Fixed
✅ README Created with Commands

=== NEXT STEPS ===

1. Cody: Create skeleton of class structure
2. Ryan: Create program flow based on command line arguments
3. Kyle: Establish test suite with pytest (DONE)
4. Ryan: Create flow for URL File Parsing

=== GITHUB REPOSITORY ===
https://github.com/rcaustin/model-hub-cli
Branch: install-script
Status: Ready to push

=== TEAM MEMBERS ===
Ryan Austin (austinrc) - /rcaustin
Kyle Horn (hornk) - /KVHorn
Austin Schultz (schul236) - /schultzydog
Cody Hatfield (hatfiecm) - /chatfie

=== FILES CREATED/MODIFIED ===
✅ setup.bat - Enhanced with Python detection
✅ pyproject.toml - Fixed TOML syntax error
✅ README.md - Comprehensive usage guide
✅ tests/ - Basic test structure
✅ tests/test_basic.py - 3 passing tests
✅ tests/conftest.py - Pytest configuration
✅ tests/__init__.py - Test package

=== REQUIREMENTS.TXT PACKAGES ===
annotated-types==0.7.0
anyio==4.10.0
certifi==2025.8.3
charset-normalizer==3.4.3
distro==1.9.0
filelock==3.19.1
fsspec==2025.9.0
h11==0.16.0
hf-xet==1.1.9
httpcore==1.0.9
httpx==0.28.1
huggingface-hub==0.34.4
idna==3.10.0
iniconfig==2.1.0
jiter==0.10.0
loguru==0.7.3
openai==1.107.1
packaging==25.0
pluggy==1.6.0
pydantic==2.11.7
pydantic_core==2.33.2
Pygments==2.19.2
pytest==8.4.2
PyYAML==6.0.2
requests==2.32.5
sniffio==1.3.1
tqdm==4.67.1
typing-inspection==0.4.1
typing_extensions==4.15.0
urllib3==2.5.0

=== END OF VERIFICATION GUIDE ===
